# Q1
row = read.csv("rowers.txt")
# Q1
choose(145,1)
choose(145,2)
choose(145,3)
.95^144
145*(.05)*(.95)^144
choose(145,2)*(.05)^2*(.95)^143
choose(145,3)*(.05)^3*(.95)^142
.0045+.0170+.0427
12^7
e^2
exp(2)
exp(1)
exp(-4.23)*4.23
(exp(-4.23)*(4.23)^2)/2!
(exp(-4.23)*(4.23)^2)/factorial(2)
.0616
.0616+.1302
1-.1918
choose(5,3)*(1/6)^3*(5/6)^2
sqrt(4.23)
1-pgamma(2,4,1)
pnorm(2.06,0,1)
pnorm(.53,0,1)
pnorm(2.06,0,1)-pnorm(.53,0,1)
pnorm(2.89,0,1)-pnorm(0,0,1)
pnorm(1,0,1)-pnorm(-1,0,1)
pnorm(1E99,0,1)-pnorm(2.89,0,1)
(pnorm(1E99,0,1)-pnorm(2,0,1))+(pnorm(-2,0,1)-pnorm(-1E99,0,1))
x = rnorm(1E99,0,1)
x = rnorm(100000,0,1)
sum(-1<x<1)/length(x)
sum(x>2.89)/length(x)
x = rnorm(1000000,0,1)
sum(x>2.89)/length(x)
x = rnorm(10000,0,1)
sum(x>2.89)/length(x)
x = rnorm(1000,0,1)
sum(x>2.89)/length(x)
x = rnorm(100000,0,1)
sum(x>2.89)/length(x)
qnorm(.025,0,1)
qnorm(.9,0,1)
pnorm(85,98,16)
qnorm(.02,98,16)
qnorm(.98,98,16)
pnorm(160,98,16)
rgamma(1000000,5,2)
x= rgamma(1000000,5,2)
mean(2/x^3)
mean(2/x^3)
y=x^2-x+1
mean(y<10)
.25/4
96/160
qf(.01,8,4)
qf(.99,8,4)
qchisq(.05,8)
qchisq(.95,8)
x = [17.5, 14.5, 15.2, 14.0, 17.3, 18.0, 13.8]
x = 17.5, 14.5, 15.2, 14.0, 17.3, 18.0, 13.8
x = c(17.5, 14.5, 15.2, 14.0, 17.3, 18.0, 13.8)
sd(x)
sd(x)
sd(x)
sd(x)
sd(x)
x = c(93, 140, 8, 120, 3, 120, 33, 70, 91, 61, 7, 100, 19, 98, 110,
23, 14, 94, 57, 9, 66, 53, 28, 76, 58, 9, 73, 49, 37, 92)
x = c(93, 140, 8, 120, 3, 120, 33, 70, 91, 61, 7, 100, 19, 98, 110,
23, 14, 94, 57, 9, 66, 53, 28, 76, 58, 9, 73, 49, 37, 92)
mean(X)
mean(x)
sd(x)
y = c(139, 64, 18, 54, 3, 32, 5, 1, 100, 14, 10, 60, 2, 4, 21, 39, 84, 69, 9,
13, 61, 12, 46, 109, 43, 14, 17, 7, 5, 28)
mean
mean(y)
sd(y)
var(x)
x-y
mean(x-y)
sd(x-y)
library(readr)
FighterGeneralHeights <- read_csv("Data/FighterGeneralHeights.csv")
View(FighterGeneralHeights)
mean(pilot)
x = c(65.3, 67.5, 68.3, 66.6, 63.7, 69.6, 67.7, 64.9, 68.0, 64.8, 68.2, 66.2)
y = c(68.9, 67.4, 71.4, 71.2, 73.0, 69.3, 73.2, 64.9, 73.1, 74.2, 81.2, 62.7, 65.2, 63.8)
mean(x)
mean(y)
sd(x)
sd(y)
x = c(11.5, 11.8, 15.7, 16.1,
14.1, 10.5, 15.2, 19.0, 12.8, 12.4, 19.2, 13.5, 16.5, 13.5, 14.4, 16.7, 10.9, 13.0, 15.1, 17.1,
13.3, 12.4, 8.5, 14.3, 12.9, 11.1, 15.0, 13.3, 15.8, 13.5, 9.3, 12.2, 10.3)
mean(x)
sd(x)
qchisq(.05, 70)
qchisq(1-.05, 70)
qchisq(1-.05/2, 70)
qchisq(.05/2, 70)
read.csv(FighterGeneralHeights.csv)
read.csv("Class_Data_F2019.txt")
read.csv("Class_Data_F2019.txt")
dat = read.csv("Class_Data_F2019.txt")
library(MASS)
set.seed(2021)
x=rnorm(100,5,2)
fitdistr(x, "normal")
ANOVA = function(xbar,s,n){
N=sum(n)
k=length(xbar)
xbarbar=sum(xbar*n)/N
SSTr=sum(n*(xbar-xbarbar)^2)
SSE=sum((n-1)*s^2)
MSTr=SSTr/(k-1)
MSE=SSE/(N-k)
F.stat=MSTr/MSE
p.val=1-pf(F.stat,k-1,N-k)
return(list(F=F.stat,p.val=p.val))
}
herbmeans = c(90.2, 89.3, 85)
herbsds = c(6.5, 7.8, 7.4)
herbn = rep(30,3)
ANOVA(herbmeans, herbsds, herbn)
# Problem 2
# =========
baseball=read.table("C:/Users/Cam/Documents/Data/MATH-2140/baseball.dat",header=T)
baseballY = baseball[,1]
# Part a
baseball[,14] = as.factor(baseball[,14]) # Free agent as factor
baseball[,15] = as.factor(baseball[,15]) # Arbitration as factor
# Part b
fullmod = lm(salary~.,data=baseball) # ~. indicates use all variables
step(fullmod) # Backward elimination
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(tidyverse)
library(shiny)
mtcars <- mtcars %>%
mutate(cyl = as_factor(cyl), vs = as_factor(vs), am = as_factor(am), gear = as_factor(gear), carb = as_factor(carb))
ui <- fluidPage (
titlePanel('Motor Trend Car Road Tests'),
sidebarLayout(
sidebarPanel(
selectInput('variable', 'Variable', choices = names(mtcars)),
selectInput('plottype', 'Plot Type', 3,
choices = c("Histogram", "Box Plot", "Bar Plot"))
),
mainPanel(
plotOutput('plot')
)
)
)
server <- function(input, output, session) {
data <- reactive({
mtcars[, c(input$variable)]
})
output$plot <- renderPlot({
variable <- input$variable
plottype <- input$plottype
if(is.numeric(data()) && plottype %in% c("Histogram")) {
ggplot(mtcars, aes_string(x = variable)) +
geom_histogram(fill = "skyblue1", color = "black") +
labs(title = paste("Histogram of", variable),
x = variable,
y = "Frequency") +
theme(axis.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5, face = "bold", size = 18))
}
else if(is.numeric(data()) && plottype %in% c("Box Plot")) {
ggplot(mtcars, aes_string(x = variable)) +
geom_boxplot(fill = "purple", color = "black") +
labs(title = paste("Box Plot of", variable),
x = variable,
y = "Frequency") +
theme(axis.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5, face = "bold", size = 18))
}
else if(is.factor(data()) && plottype %in% c("Bar Plot")) {
ggplot(mtcars, aes_string(x = variable)) +
geom_bar(fill = "magenta1", color = "black") +
labs(title = paste("Bar Plot of", variable),
x = variable,
y = "Frequency") +
theme(axis.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5, face = "bold", size = 18))
}
else {
plot(NULL, xlim = c(0, 1), ylim = c(0, 1), main = "Invalid Plot Type",
sub = "Please select appropriate plot type for the selected variable",
xlab = "", ylab = "", type = "n")
}
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
mtcars <- mtcars %>%
mutate(cyl = as_factor(cyl), vs = as_factor(vs), am = as_factor(am), gear = as_factor(gear), carb = as_factor(carb))
ui <- fluidPage (
titlePanel('Motor Trend Car Road Tests'),
sidebarLayout(
sidebarPanel(
selectInput('variable', 'Variable', choices = names(mtcars)),
selectInput('plottype', 'Plot Type', 3,
choices = c("Histogram", "Box Plot", "Bar Plot"))
),
mainPanel(
plotOutput('plot')
)
)
)
server <- function(input, output, session) {
data <- reactive({
mtcars[, c(input$variable)]
})
output$plot <- renderPlot({
variable <- input$variable
plottype <- input$plottype
if(is.numeric(data()) && plottype %in% c("Histogram")) {
ggplot(mtcars, aes_string(x = variable)) +
geom_histogram(fill = "skyblue1", color = "black") +
labs(title = paste("Histogram of", variable),
x = variable,
y = "Frequency") +
theme(axis.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5, face = "bold", size = 18))
}
else if(is.numeric(data()) && plottype %in% c("Box Plot")) {
ggplot(mtcars, aes_string(x = variable)) +
geom_boxplot(fill = "purple", color = "black") +
labs(title = paste("Box Plot of", variable),
x = variable,
y = "Frequency") +
theme(axis.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5, face = "bold", size = 18))
}
else if(is.factor(data()) && plottype %in% c("Bar Plot")) {
ggplot(mtcars, aes_string(x = variable)) +
geom_bar(fill = "magenta1", color = "black") +
labs(title = paste("Bar Plot of", variable),
x = variable,
y = "Frequency") +
theme(axis.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5, face = "bold", size = 18))
}
else {
plot(NULL, xlim = c(0, 1), ylim = c(0, 1), main = "Invalid Plot Type",
sub = "Please select appropriate plot type for the selected variable",
xlab = "", ylab = "", type = "n")
}
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
mtcars <- mtcars %>%
mutate(cyl = as_factor(cyl), vs = as_factor(vs), am = as_factor(am), gear = as_factor(gear), carb = as_factor(carb))
ui <- fluidPage (
titlePanel('Motor Trend Car Road Tests'),
sidebarLayout(
sidebarPanel(
selectInput('variable', 'Variable', choices = names(mtcars)),
selectInput('plottype', 'Plot Type', 3,
choices = c("Histogram", "Box Plot", "Bar Plot"))
),
mainPanel(
plotOutput('plot')
)
)
)
server <- function(input, output, session) {
data <- reactive({
mtcars[, c(input$variable)]
})
output$plot <- renderPlot({
variable <- input$variable
plottype <- input$plottype
if(is.numeric(data()) && plottype %in% c("Histogram")) {
ggplot(mtcars, aes_string(x = variable)) +
geom_histogram(fill = "skyblue1", color = "black") +
labs(title = paste("Histogram of", variable),
x = variable,
y = "Frequency") +
theme(axis.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5, face = "bold", size = 18))
}
else if(is.numeric(data()) && plottype %in% c("Box Plot")) {
ggplot(mtcars, aes_string(x = variable)) +
geom_boxplot(fill = "purple", color = "black") +
labs(title = paste("Box Plot of", variable),
x = variable,
y = "Frequency") +
theme(axis.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5, face = "bold", size = 18))
}
else if(is.factor(data()) && plottype %in% c("Bar Plot")) {
ggplot(mtcars, aes_string(x = variable)) +
geom_bar(fill = "magenta1", color = "black") +
labs(title = paste("Bar Plot of", variable),
x = variable,
y = "Frequency") +
theme(axis.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5, face = "bold", size = 18))
}
else {
plot(NULL, xlim = c(0, 1), ylim = c(0, 1), main = "Invalid Plot Type",
sub = "Please select appropriate plot type for the selected variable",
xlab = "", ylab = "", type = "n")
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(stats)
ui <- dashboardPage(
dashboardHeader(title = "Dendrogram Viewer for Studio Ghibli Dataset"),
dashboardSidebar(
fileInput("dataFile", "Upload your Studio Ghibli dataset", accept = ".csv"),
selectInput("numColumns", "Select numeric columns for clustering",
choices = NULL, selected = NULL, multiple = TRUE),
selectInput("distanceType", "Select Distance Type",
choices = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski"), selected = "euclidean"),
selectInput("linkageMethod", "Select Linkage Method",
choices = c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty", "median", "centroid"), selected = "complete"),
actionButton("update", "Update Selection")
),
dashboardBody(
plotOutput("dendrogramPlot"),
verbatimTextOutput("fileInfo")
)
)
server <- function(input, output, session) {
data <- reactive({
inFile <- input$dataFile
if (is.null(inFile)) {
return(NULL)
}
read.csv(inFile$datapath, na.strings = c("NA", "na", ""))
})
observe({
df <- data()
updateSelectInput(session, "numColumns", choices = names(df)[sapply(df, is.numeric)])
})
output$fileInfo <- renderPrint({
df <- data()
if (is.null(df)) {
"No file uploaded."
} else {
summary(df)
}
})
output$dendrogramPlot <- renderPlot({
req(input$update)
df <- data()
if (is.null(df) || is.null(input$numColumns)) {
return()
}
clean_data <- df[, input$numColumns]
clean_data <- apply(clean_data, 2, function(column) {
if (any(is.na(column))) {
column[is.na(column)] <- mean(column, na.rm = TRUE)
}
return(column)
})
dist_matrix <- tryCatch({
dist(clean_data, method = input$distanceType) #dist() method
}, warning = function(w) {
cat("Warning: ", w$message, "\n")
return(NULL)
}, error = function(e) {
cat("Error: ", e$message, "\n")
return(NULL)
})
if (!is.null(dist_matrix)) {
hc <- hclust(dist_matrix, method = input$linkageMethod)
#this is specifically for agglomerative
plot(hc, main = "Dendrogram of Agglomerative Hierarchical Clustering")
}
})
}
shinyApp(ui, server)
library(dendextend)
library(ggplot2)
library(plotly)
library(shiny)
library(factoextra)
library(cluster)
library(stats)
data = read.csv("Studio Ghibli [TEST].csv", header = TRUE, row.names = 1)
setwd("C:/Users/Cam/Documents/Spring '24/MATH-3190/Final_Project_Repo")
library(dendextend)
library(ggplot2)
library(plotly)
library(shiny)
library(factoextra)
library(cluster)
library(stats)
data = read.csv("Studio Ghibli [TEST].csv", header = TRUE, row.names = 1)
data_new <- na.omit(data)
data_new <- data_new[c("Year", "Budget", "Revenue", "Duration")]
col_names <- c("Year", "Budget_in_$M", "Revenue_in_$", "Duration_in_Minutes")
data_new <- setNames(data_new, col_names)
# data_new <- matrix(data_new)
data_new
clean_data <- apply(data_new, 2, function(column) {
if(any(is.na(column))) {
column[is.na(column)] <- mean(column, na.rm = TRUE)
}
return(column)
})
dend <- data_new |>
dist() |>
hclust(method = "ave") |>  # "ave" is default: the average linkage method
as.dendrogram()
dend2 <- color_branches(dend, 5)
p <- ggplot(dend2, horiz = T, offset_labels = -3)
ggplotly(p)
# data_new
# write.csv(data_new, "Studio Ghiblie [TEST2].csv")
